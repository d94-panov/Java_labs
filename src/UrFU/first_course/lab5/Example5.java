package UrFU.first_course.lab5;

//Напишите программу с классом, у которого есть закрытое целочисленное
//поле. Значение полю присваивается с помощью открытого метода. Методу
//аргументом может передаваться целое число, а также метод может вызываться
//без аргументов. Если методы вызывается без аргументов, то поле получает
//нулевое значение. Если метод вызывается с целочисленным аргументом, то
//это значение присваивается полю. Однако если переданное аргументом
//методу значение превышает 100, то значением полю присваивается число 100
//Предусмотрите в классе конструктор, который работает по тому же принципу
//что и метод для присваивания значения полю. Также в классе должен быть
//метод, позволяющий проверить значение поля.

public class Example5 {
    public static void main(String[] args) {
        Task myTask = new Task(21); // присваивание значения поля через конструктор
        System.out.println("Число = " + myTask.PrintInt() + "\n");

        myTask.Set(15); // присваивание значения поля через етод с аргументом
        System.out.println("Число = " + myTask.PrintInt() + "\n");

        myTask.Set(125); // присваиваение значения больше 100 полю через метод с аргументом
        System.out.println("Число = " + myTask.PrintInt() + "\n");

        myTask.Set(-15); // присваиваение значения меньше 0 полю через метод с аргументом
        System.out.println("Число = " + myTask.PrintInt() + "\n");

        myTask.Set(); // присваиваение значения полю через метод без аргументов
        System.out.println("Число = " + myTask.PrintInt() + "\n");
    }

    static class Task {
        private int int1; // закрытое целочисленное поле

        public void Set(int n) { // значение полю присваивается с помощью открытого метода
            System.out.println("Метод Set() с аргументом");
            int1 = n;
            if (n >= 100) { // если переданное аргументом методу значение превышает 100, то значением полю присваивается число 100
                int1 = 100;
            }
            if (n <= 0) { // если переданное аргументом методу значение меньше 0, то значением полю присваивается число 0
                int1 = 0;
            }
        }

        public void Set() { // Если методы вызывается без аргументов, то поле получает нулевое значение
            System.out.println("Метод Set() без аргумента");
            int1 = 0;
        }

        public int PrintInt() { // метод, позволящий проверить значение поля
            return int1;
        }

        Task(int int1) { // конструктор, который работает по тому же принципу что и метод для присваивания значения полю
            System.out.println("Task() конструктор");
            this.Set(int1);
        }
    }
}
